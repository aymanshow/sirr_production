# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from osv import fields,osv

class maintenance_contract(osv.osv):
    """Gestion de Contrat de Maintenance"""
    _name = 'maintenance.contract'
    _columns = {
        'name': fields.char('Numero de Contrat',size=32),
        'partner_id': fields.many2one('res.partner','Client', help='Client'),
        'product_id': fields.many2one('product.product','Article', help='Article sous garantie'),
        'prod_lot_id': fields.many2one('stock.production.lot','Numero de Serie'),
        'partner_address_id': fields.many2one('res.partner.address', 'Addresse Dintervention'),
        'price_unit': fields.float('Prix Unitaire'),
        'date': fields.date('Date de contrat'),
        'date_start': fields.date('Date debut'),
        'date_end': fields.date('Date de fin'),
        'state': fields.selection([('draft','Brouillon'),('open','En cours'),('done','Termine'),('cancel','Annule')],'Etat',readonly=True),
        'date_dernier_visite': fields.date('Date dernier visite'),
        'invoiced': fields.boolean('Facture'),
    }

    

    def onchange_product(self, cr, uid, ids, shop_id):
        v = {}
        if shop_id:
            shop = self.pool.get('product.product').browse(cr, uid, shop_id)
            v['price_unit'] = shop.maintainance_cost
        return {'value': v}

maintenance_contract()

class product_product(osv.osv):
    _inherit='product.product'
    _columns = {
        'maintainance_cost':fields.float('Cout Entretiens'),
    }
product_product()


#TODO
#les etats
#la facturation
#les planning des vistes
#bouton visite effectue
