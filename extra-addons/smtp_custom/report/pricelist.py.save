# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

import time
import pooler
import netsvc
from mx import DateTime

logger = netsvc.Logger()

from report import report_sxw

class pricelist_ver(report_sxw.rml_parse):
    def __init__(self, cr, uid, name, context):
        super(pricelist_ver, self).__init__(cr, uid, name, context)    
        self.localcontext.update({
            'get_qty':self._get_qty,
            'get_value':self._get_value,
        })
        self.context = context

    def _get_qty(self,item):
        print item
        product=item.product_id.id
        print 'start',item.price_version_id.date_start
        print 'end',item.price_version_id.date_end
        print 'prod',product
        # start=DateTime.strptime(item.price_version_id.date_start,"%Y-%m-%d")
        # end=DateTime.strptime(item.price_version_id.date_end,"%Y-%m-%d")
        # start=str(start.strftime('%Y-%m-%d')) 
        # end=str(end.strftime('%Y-%m-%d'))      
        query='select sum(product_uom_qty) from sale_report where product_id='
        query+=str(product)
        query+=' and date>=\''+item.price_version_id.date_start
        query+='\' and date<=\''+item.price_version_id.date_end
        query+='\''
	print query
        qty=self.cr.execute(query)
	print qty
	print qty.fetchall()
        qty=cr.fetchall()[0]
	print 'quantity.............'
        print qty
        return qty
        
    def _get_value(self,item):
        product=item.product_id.id
        start=DateTime.strptime(item.price_version_id.date_start,"%Y-%m-%d")
        end=DateTime.strptime(item.price_version_id.date_end,"%Y-%m-%d")
        start=str(start.strftime('%Y-%m-%d')) 
        end=str(end.strftime('%Y-%m-%d'))      
        query='select sum(price_total) from sale_report where product_id='
        query+=product
        query+=' and date>=\''+start
        query+='\' and date<=\''+end
        query+='\''
        print start
        print end
        print product
        qty=self.cr.execute(query)
        qty=cr.fetchall()[0]        
        print qty
        return qty


report_sxw.report_sxw('report.product.pricelist.version.rndLNpBi', 'product.pricelist.version', '', parser=pricelist_ver)
# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
