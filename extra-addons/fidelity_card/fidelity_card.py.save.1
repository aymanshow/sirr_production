##############################################################################
#    
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2009 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.     
#
##############################################################################

from osv import fields
from osv import osv
import time
import netsvc

import ir
from mx import DateTime

class fidelity_card_type(osv.osv):
	_name = 'fidelity.card.type'
	_description = 'Type de carte'
	_columns = {
		'name': fields.char('Type', size=32,required=True),
		'card_limit_ids':fields.one2many('fidelity.card.limit','type_id','Limits'),
		'description': fields.char('Desccription', size=64,required=True),		
	}
fidelity_card_type()
	
class fidelity_card_limit(osv.osv):
	_name = 'fidelity.card.limit'
	_description = ' Limite sur carte de fidelite'
	_columns = {
		'name': fields.float('Montant Facture', required=True),
		'marks':fields.float('Points'),
		'type_id':fields.many2one('fidelity.card.type','Type de Carte'),
		'validity_period':fields.integer('Validite de carte'),
	}
fidelity_card_limit()
	
class fidelity_card(osv.osv):
	_name = 'fidelity.card'
	_description = 'Carte de Fidelite'
	_columns = {
        'name': fields.char('Numero de Carte', size=64, required=True),
		'type': fields.many2one('fidelity.card.type','Type',required=True),
		'state':fields.selection([('draft','Disponible'),('active','Active'),('cancel','Annule')],'Etat'),
		'partner_id':fields.many2one('res.partner','Client'),
	}
fidelity_card()

class fidelity_card_issue(osv.osv):
	_name = 'fidelity.card.issue'
	_description = 'Livraison de carte de fidelite'
	_columns = {
		'name':fields.many2one('res.partner','Client',required=True),
		'fidelity_card_id':fields.many2one('fidelity.card','Carte',required=True),
		'date':fields.date('Date',required=True),
		'email':fields.char('Adresse mail', size=64,required=True),
		'user_id':fields.many2one('res.users','Livre par'),
		'valid_user_id':fields.many2one('res.users','Validation'),
		'state':fields.selection([('draft','Brouillon'),('open','Active'),('cancel','Annule')],'Etat'),        
		'date':fields.date('Date'),
	}
	def validate(self,cr,uid,ids,args):
		self.write(cr,uid,redemption.id,{'valid_user_id':uid,'state':'open'})
		return True	
        
fidelity_card_issue()

class fidelity_card_redemption(osv.osv):
	_name = 'fidelity.card.redemption'
	_description = 'Encaissment des points'
	_columns = {
		'name':fields.char('Bon d\'Achat',size=32),
		'fidelity_card_id':fields.many2one('fidelity.card','Carte'),
		'partner_id':fields.many2one('res.partner','Client'),
		'card_sales_ids':fields.one2many('fidelity.card.sales','card_redemption_id','Ventes'),
		'marks':fields.float('Points'),
		'value':fields.float('Valeur AR'),
		'date':fields.date('Date'),
		'user_id':fields.many2one('res.users','Livre par'),
		'valid_user_id':fields.many2one('res.users','Validation'),
		'state':fields.selection([('draft','Brouillon'),('open','Ouverte'),('done','Encaisse'),('expired','Expire')],'Etat')
	}
	__defaults={
                'state':'draft',
                'date':lambda *a: time.strftime('%Y-%m-%d'),
                'user_id':lambda obj, cr, uid, context: uid,
        }
defaults={
		'state':'draft',
		'date':lambda *a: time.strftime('%Y-%m-%d'),
		'user_id':lambda obj, cr, uid, context: uid,
	}
#A coriger
	
	def calculate(self,cr,uid,ids,args):
		for redemption in self.browse(cr,uid,ids):
			marks=0
			for sale in redemption.card_sales_ids:
				marks+=sale.marks
			self.write(cr,uid,redemption.id,{'marks':marks})
		return True
	def validate(self,cr,uid,ids,args):
		sequence=self.pool.get('ir.sequence').get(cr, uid, 'fidelity.card')
		self.write(cr,uid,redemption.id,{'valid_user_id':uid,'state':'open'})
		return True
		
fidelity_card_redemption()

class fidelity_card_sales(osv.osv):
	_name='fidelity.card.sales'
	_description='Ventes avec carte de fidelite'
	_columns ={
		'name':fields.many2one('account.invoice','Facture'),
		'date':fields.date('Date'),
		'fidelity_card_id':fields.many2one('fidelity.card','Carte'),
		'amount':fields.related('name','amount_total','Montant'),
		'partner_id':fields.related('fidelity_card_id','partner_id','Client'),
		'marks':fields.float('Points'),
		'card_redemption_id':fields.many2one('fidelity.card.redemption','Encaissement'),
		'state':fields.selection([('assigned','Assigne'),('redeemed','Rembourse')],'Etat')
	}
fidelity_card_sales()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:

