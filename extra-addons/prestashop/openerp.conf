[image.types]
mapping = {
        'name':'name',
        'width':'width',
        'height':'height',
        'categories':'categories',
        'products':'products',
        'manufacturers':'manufacturers',
        'suppliers':'suppliers',
        'scenes':'scenes',
        'stores':'stores',
    }
import_field_function = {
                        'categories' : mapping_val['categories'] == '1' and True or False,
                        'products' : mapping_val['products'] == '1' and True or False,
                        'manufacturers' : mapping_val['manufacturers'] == '1' and True or False,
                        'suppliers' : mapping_val['suppliers'] == '1' and True or False,
                        'scenes' : mapping_val['scenes'] == '1' and True or False,
                        'stores' : mapping_val['stores'] == '1' and True or False,
    }
export_field_function = {
        
                        'categories' : mapping_val['categories'] and '1' or '0',
                        'products' : mapping_val['products'] and '1' or '0',
                        'manufacturers' : mapping_val['manufacturers'] and '1' or '0',
                        'suppliers' : mapping_val['suppliers'] and '1' or '0',
                        'scenes' : mapping_val['scenes'] and '1' or '0',
                        'stores' : mapping_val['stores'] and '1' or '0',
                        'height':str(mapping_val['height']),
                        'width':str(mapping_val['width']),

    }
ext_obj = image_types
ext_record = 'image_type'

[image.image]
type_mapping = {
    'products': ['product.product','product_id'],
    'categories': ['product.category','categ_id'],
    'manufacturers': ['res.partner','manufacturer_id'],
    'suppliers': ['res.partner','supplier_id'],
    'stores': ['prestashop.lang','language_id'],
    }

[prestashop.lang]
mapping = {
            'name':'name',
            'language_code':'language_code',
            'iso_code':'iso_code',
            'date_format_lite':'date_format_lite',
            'date_format_full':'date_format_full',
            'is_rtl':'is_rtl',
            'active':'active',
        }
import_field_function = {
#                        'date_format_full' : mapping_val['date_format_full'].split(' ')[-1],
                        'lang_id' : self.pool.get('res.lang').search(cr, uid, [('iso_code', '=', mapping_val['iso_code'])],context={'active_test':False}) and self.pool.get('res.lang').search(cr, uid, [('iso_code', '=', mapping_val['iso_code'])],context={'active_test':False})[0] or False,
#                        'iso_code' : mapping_val['iso_code'].lower(),
#                        'is_rtl' : mapping_val['is_rtl'] == 1 and 'rtl' or 'ltr',
                        'active' : mapping_val['active'] == '1' and True or False,
                        'shop_ids':[[4,shop_id]],
                        }
export_field_function = {
                        'name': mapping_val['name'].replace('/ ','(')+')',
                        'code' : mapping_val['code'].replace('_','-').lower(),
                        'active' : mapping_val['active'] and 1 or 0,
                        'direction' : mapping_val['direction'] == 'rtl' and 1 or 0,
                        }
ext_obj = languages
ext_record = 'language'
#search_field = [('name', '=', openerp_data['name'])]


#Customer Data
[res.partner]
mapping = {
            'name':'firstname',
            'lastname':'lastname',
            'email':'email',
            'active':'active',
            'birthday':'birthday',
            'newsletter':'newsletter',
            'is_guest':'is_guest',
            'optin':'optin',
            'category_id':'id_default_group',
            'customer':'customer',
            'supplier':'supplier',
            'is_manufacturer':'is_manufacturer',
        }
import_field_function = {
                        'firstname': context.get('ext_record', False) in ['supplier','manufacturer'] and mapping_val['name'] or mapping_val.get('firstname',False),
                        'id_default_group': (context.get('ext_record', '') in ['supplier','manufacturer'] and [[6,0,[]]] or (
                                                                                                                         [[6,0,[
                                                                                                                                mapping_val['id_default_group'] and self.pool.get('res.partner.category').get_int_ref(cr, uid, shop_id, mapping_val['id_default_group'].get('_text',False), context=context)
                                                                                                                                ]]] or [])),
                        'active' : context.get('ext_record', '') in ['supplier','manufacturer'] and True or mapping_val['active'] == '1' and True or False ,
                        'customer': context.get('customer',False),
                        'supplier': context.get('supplier',False),
                        'is_manufacturer': context.get('is_manufacturer',False),
                        'newsletter': context.get('ext_record', '') in ['supplier','manufacturer'] and True or (mapping_val['newsletter'] == '1' and True or False),
                        'optin': context.get('ext_record', '') in ['supplier','manufacturer'] and True or (mapping_val['optin'] == '1' and True or False),
                        'is_guest': context.get('ext_record', '') in ['supplier','manufacturer'] and True or (mapping_val['is_guest'] == '1' and True or False),
                        'birthday': context.get('ext_record', '') in ['supplier','manufacturer'] and '' or (mapping_val.get('birthday','') or False),
                        }
export_field_function = {
                        }
ext_obj = customers
ext_record = context.get('ext_record',False) and context['ext_record'] or 'customer'
read_mapping = {
        'supplier':['link_rewrite','name','meta_title','meta_description','meta_keywords','description'],
        'manufacturer':['active','name','short_description','meta_title','meta_description','description','meta_keywords','addresses[id]'],
        'customer':['id_default_group','newsletter_date_add','ip_registration_newsletter','last_passwd_gen','secure_key','deleted',
                    'passwd','lastname','firstname','email','note','id_gender','birthday','newsletter','optin','active','is_guest'],

    }


#Zones
[tr.presta.zone]
mapping = {
        'name':'name',
        'active':'active',
        }
import_field_function = {
                        'name':mapping_val['name'],
                        'active':mapping_val['active'],
                        }
ext_obj = zones
ext_record = 'zone'
search_field = [('name', '=', openerp_data['name'])]

#country
[res.country]
mapping = {
        'name':'name',
        'zone_id':'id_zone',
        'currency_id':'id_currency',
        'code':'iso_code',
        'contains_states':'contains_states',
        'need_identification_number':'need_identification_number',
        'display_tax_label':'display_tax_label',
        'active':'active'
        }
import_field_function = {
                        'name': mapping_val['name'],
                        'iso_code': mapping_val['iso_code'],
                        'id_zone': mapping_val['id_zone'] and self.pool.get('tr.presta.zone').get_int_ref(cr, uid, shop_id, mapping_val['id_zone'].get('_text',False), context=context) or False,
                        'id_currency': mapping_val['id_currency'] and self.pool.get('res.currency').get_int_ref(cr, uid, shop_id, mapping_val['id_currency'].get('_text',False), context=context) or False,
                        'contains_states': mapping_val['contains_states'],
                        'need_identification_number': mapping_val['need_identification_number'],
                        'display_tax_label': mapping_val['display_tax_label'],
                        'active': mapping_val['active'],
                        }  
search_field = ['|', ('name', '=', openerp_data['name']), ('code', '=', openerp_data['code'])]
ext_obj = countries
ext_record = 'country'


#States
[res.country.state]
mapping = {
        'name':'name',
        'code':'iso_code',
        'country_id':'id_country',
        'active':'active'
        }
import_field_function = {
                        'name': mapping_val['name'],
                        'iso_code': mapping_val['iso_code'],
                        'id_country': mapping_val['id_country'] and self.pool.get('res.country').get_int_ref(cr, uid, shop_id, mapping_val['id_country'].get('_text',False), context=context) or False,
                        'active': mapping_val['active'],
                        }
search_field = [('code', '=', openerp_data['code'])]                                 
ext_obj = states
ext_record = 'state'

#Partner Category
[res.partner.category]
mapping = {
        'name':'name',
        }
import_field_function = {
                        'name':mapping_val['name'],
                        }
ext_obj = groups
ext_record = 'group'
search_field = []

#Address
[res.partner.address]
mapping = {
        'country_id':'id_country',
        'state_id':'id_state',
        'partner_id':'id_customer',
        'name':'firstname',
        'last_name':'lastname',
        'street':'address1',
        'street2':'address2',
        'zip':'postcode',
        'city':'city',
        'phone':'phone',
        'mobile':'phone_mobile',
        }
import_field_function = {
                        'id_country': mapping_val['id_country'] and self.pool.get('res.country').get_int_ref(cr, uid, shop_id, mapping_val['id_country'].get('_text',False), context=context) or False,
                        'id_state': mapping_val['id_state'] and self.pool.get('res.country.state').get_int_ref(cr, uid, shop_id, mapping_val['id_state'].get('_text',False), context=context) or False,
                        'id_customer': mapping_val['id_customer'] and self.pool.get('res.partner').get_int_ref(cr, uid, shop_id, mapping_val['id_customer'].get('_text',False), context=context) or False,
                        'id_manufacturer': mapping_val.get('id_manufacturer',False) and self.pool.get('res.partner').get_int_ref(cr, uid, shop_id, mapping_val['id_manufacturer'].get('_text',False), context=context) or False,
                        'id_supplier': mapping_val.get('id_supplier',False) and self.pool.get('res.partner').get_int_ref(cr, uid, shop_id, mapping_val['id_supplier'].get('_text',False), context=context) or False,
                        }
search_field = []                                 
ext_obj = addresses
ext_record = 'address'

#Currency
[res.currency]
mapping = {
        'name':'iso_code',
        'description':'name',
        'iso_code_number':'iso_code_num',
        'symbol':'sign',
        'rate':'conversion_rate',
        'decimals':'decimals',
        'active':'active'
        }
import_field_function = {
                        'name': mapping_val['name'],
                        'iso_code': mapping_val['iso_code'],
                        'iso_code_num': mapping_val['iso_code_num'],
                        'sign': mapping_val['sign'],
                        'conversion_rate': mapping_val['conversion_rate'],
                        'decimals': mapping_val['decimals'],
                        'active': mapping_val['active'],
                        }
search_field = name
ext_obj = currencies
ext_record = 'currency'

[product.product]
mapping = {
    'name':'name',
    'qty_available':'quantity',
    'list_price':'price',
    'active':'active',
    'out_of_stock':'out_of_stock',
    'associations':'associations',
    'link_rewrite':'link_rewrite',
    'categ_id':'categ_id',
    'presta_exportable':'presta_exportable',
    
#    'ean13':'ean13',
    'default_code':'reference',
    'description':'description',
    'description_sale':'description_short',
    'standard_price':'unit_price',

    'show_price':'show_price',
    'meta_keywords':'meta_keywords',
    'meta_description':'meta_description',
    'meta_title':'meta_title',
    'location':'location',
    'upc':'upc',
    'condition':'condition',
    'available_later':'available_later',
    'available_now':'available_now',
    'unity':'unity',
    'date_add':'date_add',
    'quantity_discount':'quantity_discount',
    'customizable':'customizable',
    'on_sale':'on_sale',
    'available_for_order':'available_for_order',
    'online_only':'online_only',
    'wholesale_price':'wholesale_price',
    'minimal_quantity':'minimal_quantity',
    'quantity':'quantity',
    'additional_shipping_cost':'additional_shipping_cost',
    'width':'width',
    'depth':'depth',
    'height':'height',
    
    'seller_ids':'id_supplier',
#    'product_code':'supplier_reference',
    'tax_rule_group_id':'id_tax_rules_group',
    'tag_id':'id_tag',
    'product_options_values_id':'id_attribute',
    'product_features_ids':'id_feature',
#    'product_combination_id':'id_product_attribute',
        'shop_ids':'shop_id',
    }

export_field_function = {
    'default_code': mapping_val['default_code'] and mapping_val['default_code'] or '',
    'list_price':self._get_price_pricelist(cr, uid, shop_id, mapping_val['list_price'], self_obj.id, context),
    'associations':self._get_associations(cr, uid, shop_id, self_obj, context),
    'active' : mapping_val['active'] and 1 or 0,
    'on_sale': mapping_val['on_sale'] and 1 or 0,
    'online_only': mapping_val['online_only'] and 1 or 0,
    'quantity_discount': mapping_val['quantity_discount'] and 1 or 0,
    'customizable': mapping_val['customizable'] and 1 or 0,
    'available_for_order': mapping_val['available_for_order'] and 1 or 0,
    'show_price': mapping_val['show_price'] and 1 or 0,
    'description': mapping_val['description'] and mapping_val['description'] or '',
    'description_sale': mapping_val['description_sale'] and mapping_val['description_sale'] or '',
    'location': mapping_val['location'] and mapping_val['location'] or '',
    'unity': mapping_val['unity'] and mapping_val['unity'] or '',
    'upc': self.check_upc(cr, uid, shop_id, self_obj.upc, context),
    'link_rewrite': mapping_val['link_rewrite'] and mapping_val['link_rewrite'] or '',
    'seller_ids': self._get_supplier(cr, uid, shop_id, self_obj, context),
    'tax_rule_group_id': self._get_tax(cr, uid, shop_id, self_obj, context),
#    'product_combination_id': self._get_combination(cr, uid, shop_id, self_obj, context),
    }

import_field_function = {
    'active' : mapping_val['active'] == '1' and True or False,
                        'shop_id':[[4,shop_id]],
    'categ_id': self._set_associations(cr, uid, shop_id,  mapping_val['associations']['categories'], context),
    'presta_exportable':True,
    'id_supplier': mapping_val['id_supplier'] and self._set_supplier(cr, uid, shop_id, mapping_val['id_supplier'].get('_text',False), context) or [],
#    'meta_keywords': mapping_val['meta_keywords'] or '',
#    'meta_description': mapping_val['meta_description'] or '',
#    'meta_title': mapping_val['meta_title'] or '',
#    'available_later': mapping_val['available_later'] or '',
#    'available_now': mapping_val['available_now'] or '',
#    'description': mapping_val['description'] or '',
#    'supplier_reference': self._get_supplier_ref(cr, uid, shop_id, mapping_val['id_supplier'].get('_text',False), mapping_val['supplier_reference']) or '',
#    'id_tax_rules_group': self._set_tax(cr, uid, shop_id, mapping_val['id_tax_rules_group']) or [],
    'id_tax_rules_group': self._set_tax(cr, uid, shop_id, mapping_val['id_tax_rules_group']) or [],
    'id_tag': self._set_associations_tag(cr, uid, shop_id,  mapping_val['associations']['tags'], context),
    'id_feature': self._set_associations_feature(cr, uid, shop_id,  mapping_val['associations']['product_features'], context),
#    'id_feature': self._set_associations_feature(cr, uid, shop_id,  mapping_val['associations']['product_features'], context),
#    'id_attribute': self._set_associations_attribute(cr, uid, shop_id,  mapping_val['associations']['product_option_values'], context),
    }
ext_obj = products
ext_record = 'product'
exclude_fields = ['manufacturer_name',
               'position_in_category',
               'categ_id','id_feature'
               ]
read_mapping = [
    'categories[id]', 'combinations[id]', 'product_option_values[id]',
    'product_features[id]', 'tags[id]', 'link_rewrite', 'meta_title',
    'meta_keywords', 'price', 'description', 'minimal_quantity', 'available_for_order',
    'wholesale_price', 'unit_price','height',
    'depth', 'reference', 'active', 'quantity', 'condition', 'meta_description',
    'available_now', 'additional_shipping_cost', 'name', 'width', 'customizable',
    'quantity_discount', 'show_price', 'on_sale', 'upc', 'available_later', 'online_only', 'unity',
    'id_tax_rules_group', 'location', 'id_supplier', 'quantity', 'description_short',
    'out_of_stock'
    ]


[product.category]
mapping = {
        'name':'name',
        'active':'active',
        'parent_id':'id_parent',
        'link_rewrite':'link_rewrite',
        'meta_keywords':'meta_keywords',
        'meta_description':'meta_description',
        'description':'description'
    }
import_field_function = {
                        'active' : mapping_val['active'] == '1' and True or False,
                        'id_parent': mapping_val['id_parent'] and self.get_int_ref(cr, uid, shop_id, mapping_val['id_parent'].get('_text',False), context=context) or False,
                        }
export_field_function = {
                    'active' : 1,
                    'parent_id': self._get_parent(cr, uid, shop_id, self_obj, context),
                    'description': self_obj.description or self_obj.name,

        }
ext_record = 'category'
exclude_fields = ['level_depth','nb_products_recursive','link_rewrite']

#tax rule groups 
[tax.rule.group]
mapping = {
        'name':'name',
        }
import_field_function = {
                        }

export_field_function = {
                        }
ext_obj = tax_rule_groups
ext_record = 'tax_rule_group'
search_field = []

#tax rules
[tax.rules]
mapping = {
        'tax_id':'id_tax',
        'tax_rule_group_id':'id_tax_rules_group',
        #'state_id':'id_state',
        'country_id':'id_country',
        'state_behavior':'state_behavior',
        }
import_field_function = {
                        'id_tax': mapping_val['id_tax'] and self.pool.get('account.tax').get_int_ref(cr, uid, shop_id, mapping_val['id_tax'], context=context) or False,
                        'id_tax_rules_group': mapping_val['id_tax_rules_group'] and self.pool.get('tax.rule.group').get_int_ref(cr, uid, shop_id, mapping_val['id_tax_rules_group'].get('_text',False), context=context) or False,
                       # 'id_state': mapping_val['id_state'] and self.pool.get('tr.presta.zone').get_int_ref(cr, uid, shop_id, mapping_val['id_state'].get('_text',False), context=context) or False,
                        'id_country': mapping_val['id_country'] and self.pool.get('res.country').get_int_ref(cr, uid, shop_id, mapping_val['id_country'].get('_text',False), context=context) or False,
                        }

export_field_function = {
                        'tax_id': mapping_val['tax_id'] and self.pool.get('account.tax').get_ext_ref(cr, uid, shop_id, mapping_val['tax_id'], context=context) or False,
                        'tax_rule_group_id': mapping_val['tax_rule_group_id'] and self.pool.get('tax.rule.group').get_ext_ref(cr, uid, shop_id, mapping_val['tax_rule_group_id'], context=context) or False,
                      #  'state_id': mapping_val['state_id'] and self.pool.get('tr.presta.zone').get_ext_ref(cr, uid, shop_id, mapping_val['state_id'], context=context) or False,
                        'country_id': mapping_val['country_id'] and self.pool.get('res.country').get_ext_ref(cr, uid, shop_id, mapping_val['country_id'], context=context) or False,
                        'state_behavior': mapping_val['state_behavior'] and 1 or 0,
                        }
ext_obj = tax_rules
ext_record = 'tax_rule'
search_field = []

#taxes
[account.tax]
mapping = {
        'name':'name',
#        'active':'active',
        'amount':'rate',
        }
import_field_function = {
                        'rate': mapping_val['rate'] and (float(mapping_val['rate'])/100) or False
                        }

export_field_function = {
                        'amount': mapping_val['amount'] and (float(mapping_val['amount'])*100) or 0
                        }
ext_obj = taxes
ext_record = 'tax'
search_field = []

#PRESTASHOP TAG
[prestashop.tag]
mapping = {
        'name':'name',
        }
import_field_function = {
                        }
export_field_function = {
                        }
ext_obj = tags
ext_record = 'tag'
search_field = []


#PRESTASHOP product.options
[product.options]
mapping = {
        'name':'name',
        'public_name':'public_name',
#        'prod_opt_value_id':'id_attribute',
        }
import_field_function = {
                        }
export_field_function = {
                        }
ext_obj = product_options
ext_record = 'product_option'
search_field = []


#PRESTASHOP product.option.values
[product.options.value]
mapping = {
        'name':'name',
        'prod_opt_id':'id_attribute_group',
        }
import_field_function = {
                         'id_attribute_group': mapping_val['id_attribute_group'] and self.pool.get('product.options').get_int_ref(cr, uid, shop_id, mapping_val['id_attribute_group'].get('_text',False), context=context) or False,
                        }
export_field_function = {
                         'prod_opt_id': mapping_val['prod_opt_id'] and self.pool.get('product.options').get_ext_ref(cr, uid, shop_id, mapping_val['prod_opt_id'], context=context) or False,
                        }
ext_obj = product_option_values
ext_record = 'product_option_value'
search_field = []


#product features
[product.features]
mapping = {
        'name':'name',
        }
import_field_function = {
                        }
export_field_function = {
                        }
ext_obj = product_features
ext_record = 'product_feature'
search_field = []

#product features values
[product.feature.values]
mapping = {
        'name':'value',
        'custom':'custom',
        'feature_id':'id_feature',
        }
import_field_function = {
                    'id_feature': mapping_val['id_feature'] and self.pool.get('product.features').get_int_ref(cr, uid, shop_id, mapping_val['id_feature'].get('_text',False), context=context) or False,
                        }
export_field_function = {
                        'feature_id': mapping_val['feature_id'] and self.pool.get('product.features').get_ext_ref(cr, uid, shop_id, mapping_val['feature_id'], context=context) or False,
                        'custom' : mapping_val['custom'] and 1 or 0,
                        }
ext_obj = product_feature_values
ext_record = 'product_feature_value'
search_field = []

#delivery carrier
[delivery.carrier]
mapping = {
        'name':'name',
        'active':'active',
        'url':'url',
        'is_free':'is_free',
        'delay':'delay',
        }
import_field_function = {
                    #'id_feature': mapping_val['id_feature'] and self.pool.get('product.features').get_int_ref(cr, uid, shop_id, mapping_val['id_feature'].get('_text',False), context=context) or False,
                        }
ext_obj = carriers
ext_record = 'carrier'
search_field = [('name', '=', openerp_data['name'])]

#price range/weight range
[delivery.grid.line]
mapping = {
        'name':'name',
        'min_value':'delimiter1',
        'max_value':'delimiter2',
        'type':'type',
        'carrier_id':'id_carrier',
        'grid_id':'grid_id'
        }
import_field_function = {
                     'name':mapping_val['id_carrier'] and self.pool.get('delivery.carrier').get_int_ref(cr, uid, shop_id, mapping_val['id_carrier'].get('_text',False), context=context) or context.get('type'),    
                     'id_carrier': mapping_val['id_carrier'] and self.pool.get('delivery.carrier').get_int_ref(cr, uid, shop_id, mapping_val['id_carrier'].get('_text',False), context=context) or False,
                     'grid_id': mapping_val['id_carrier'] and self.pool.get('delivery.carrier').get_int_ref(cr, uid, shop_id, mapping_val['id_carrier'].get('_text',False), context=context) and self.pool.get('delivery.carrier').read(cr, uid, [mapping_val['id_carrier'] and self.pool.get('delivery.carrier').get_int_ref(cr, uid, shop_id, mapping_val['id_carrier'].get('_text',False), context=context)], ['grids_id'], context=context)[0]['grids_id'][0] or 1,
                     'type':context.get('type'),
                        }
ext_obj = weight_ranges
ext_record = context.get('ext_record',False) and context['ext_record'] or 'weight_range'
search_field = []

#delivery.handlings
[delivery.handlings]
mapping = {
        'carrier_id':'id_carrier',
        'price_range_id':'id_range_price',
        'weight_range_id':'id_range_weight',
        'zone_id':'id_zone',
        'price':'price',
        }
import_field_function = {
                     'id_carrier': mapping_val['id_carrier'] and self.pool.get('delivery.carrier').get_int_ref(cr, uid, shop_id, mapping_val['id_carrier'].get('_text',False), context=context) or False,
                     'id_range_price': mapping_val['id_range_price'] and self.pool.get('delivery.grid.line').get_int_ref(cr, uid, shop_id, mapping_val['id_range_price'].get('_text',False), context=context) or False,
                     'id_range_weight': mapping_val['id_range_weight'] and self.pool.get('delivery.grid.line').get_int_ref(cr, uid, shop_id, mapping_val['id_range_weight'].get('_text',False), context=context) or False,
                     'id_zone': mapping_val['id_zone'] and self.pool.get('tr.presta.zone').get_int_ref(cr, uid, shop_id, mapping_val['id_zone'].get('_text',False), context=context) or False,    
                        }
ext_obj = deliveries
ext_record = 'delivery'
search_field = []

#sale order staes
[sale.order.state]
mapping = {
        'name':'name',
        'template':'template',
        'send_mail':'send_email',
        'logable':'logable',
        'invoice':'invoice',
        'delivery':'delivery',
        }
import_field_function = {
                        }

export_field_function = {
                         'send_mail': mapping_val['send_mail'] and 1 or 0,
                         'logable': mapping_val['logable'] and 1 or 0,
                         'invoice': mapping_val['invoice'] and 1 or 0,
                         'delivery': mapping_val['delivery'] and 1 or 0,
                        }
ext_obj = order_states
ext_record = 'order_state'
search_field = []

#sale order line
[sale.order.line]
mapping = {
        'product_id':'product_id',
        'name':'product_name',
        'product_uom_qty':'product_quantity',
        'price_unit':'product_price',
        'order_id':'id_order',
        'discount':'discount',
        'product_uom':'product_uom',
        'tax_id':'tax_id'
        }
import_field_function = {
                     'product_id': mapping_val['product_id'] and self.pool.get('product.product').get_int_ref(cr, uid, shop_id, mapping_val['product_id'].get('_text',False), context=context) or False,
                     'id_order': mapping_val['id_order'] and self.pool.get('sale.order').get_int_ref(cr, uid, shop_id, mapping_val['id_order'].get('_text',False), context=context) or False,
                     'product_uom': self._get_uom(cr, uid, shop_id, mapping_val['product_id'], context=context),
                     'discount': mapping_val['reduction_percent'] or mapping_val['reduction_amount']/mapping_val['product_price'] or 0.0,
                 #    'tax_id': self._get_taxes(cr, uid, shop_id, mapping_val['product_id'], context=context) 
                        }

export_field_function = {
                        }
ext_obj = order_details
ext_record = 'order_details'
search_field = []

#sale order
[sale.order]

state_mapping = {
    'Payment accepted': {'draft':['progress','order_confirm']},
    }

mapping = {
        'invoice_number':'invoice_number',
        'delivery_number':'delivery_number',
        'secure_key':'secure_key',
        'payment':'payment',
        'gift_message':'gift_message',
        'shipping_number':'shipping_number',
        'invoice_date':'invoice_date',
        'delivery_date':'delivery_date',
        'conversion_rate':'conversion_rate',
        'recyclable':'recyclable',
        'gift':'gift',
        'current_state_id':'current_state',
        'partner_shipping_id':'id_address_delivery',
        'partner_invoice_id':'id_address_invoice',
        'partner_id':'id_customer',
        'carrier_id':'id_carrier',
        'partner_order_id':'partner_order_id',
        'total_discounts':'total_discounts',
        'total_paid':'total_paid',
        'total_paid_real':'total_paid_real',
        'total_products':'total_products',
        'total_products_wt':'total_products_wt',
        'total_shipping':'total_shipping',
        'carrier_tax_rate':'carrier_tax_rate',
        'total_wrapping':'total_wrapping',
        'order_line':'order_line',
        'pricelist_id':'pricelist_id',
        'order_policy':'order_policy',
        'presta_exported':'presta_exported'
#        'order_detail':'order_detail',
        }
import_field_function = {
                 'current_state': mapping_val['current_state'] and self.pool.get('sale.order.state').get_int_ref(cr, uid, shop_id, mapping_val['current_state'].get('_text',False), context=context) or False,
#                'current_state': self._update_status(cr, uid, shop_id, mapping_val['current_state'], context),
                 'id_address_delivery': mapping_val['id_address_delivery'] and self.pool.get('res.partner.address').get_int_ref(cr, uid, shop_id, mapping_val['id_address_delivery'].get('_text',False), context=context) or False,
                 'id_address_invoice': mapping_val['id_address_invoice'] and self.pool.get('res.partner.address').get_int_ref(cr, uid, shop_id, mapping_val['id_address_invoice'].get('_text',False), context=context) or False,
                 'id_customer': mapping_val['id_customer'] and self.pool.get('res.partner').get_int_ref(cr, uid, shop_id, mapping_val['id_customer'].get('_text',False), context=context) or False,
                 'id_carrier': mapping_val['id_carrier'] and self.pool.get('delivery.carrier').get_int_ref(cr, uid, shop_id, mapping_val['id_carrier'].get('_text',False), context=context) or False,
                 'partner_order_id':mapping_val['id_address_invoice'] and self.pool.get('res.partner.address').get_int_ref(cr, uid, shop_id, mapping_val['id_address_invoice'].get('_text',False), context=context) or False,
                 'order_line':self._set_associations(cr, uid, shop_id,  mapping_val, context),
                 'pricelist_id':self._get_price_list(cr, uid, shop_id, context=context) or False,
                 'delivery_date':mapping_val['delivery_date'] != '0000-00-00 00:00:00' and mapping_val['delivery_date'] or False,
                 'invoice_date':str(mapping_val['invoice_date']) != '0000-00-00 00:00:00' and mapping_val['invoice_date'] or False,
                 'order_policy':'prepaid',
                 'presta_exported':True,
                }

export_field_function = {
           
                        }
ext_obj = orders
ext_record = 'order'
search_field = []


#product Combination
[product.combination]
mapping = {
        'product_id':'id_product',
        'reference':'reference',
        'supplier_reference':'supplier_reference',
        'location':'location',
        'ean13':'ean13',
        'upc':'upc',
        'wholesale_price':'wholesale_price',
        'price':'price',
        'ecotax':'ecotax',
        'quantity':'quantity',
        'weight':'weight',
        'default_on':'default_on',
        'line_ids':'associations',
        }
import_field_function = {
                        'associations':self.set_lines(cr, uid, shop_id, mapping_val['associations']['product_option_values'],mapping_val['id']),
                        'id_product':self.pool.get('product.product').get_int_ref(cr, uid, shop_id, mapping_val['id_product']['_text'])

                        }
export_field_function = {
                        'line_ids':self.get_lines(cr, uid, shop_id, self_obj),
                        'product_id':self_obj.product_id and self.pool.get('product.product').get_ext_ref(cr, uid, shop_id, self_obj.product_id.id) or False,
                        }
ext_obj = combinations
ext_record = 'combination'
exclude_fields = ['ean13']
read_mapping = [
        'id_product', 'reference', 'supplier_reference', 'location','ean13', 'upc', 'wholesale_price','price', 'ecotax', 'quantity',
        'weight','default_on','product_option_values[id]'
    ]
