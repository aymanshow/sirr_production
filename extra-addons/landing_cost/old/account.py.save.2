# -*- coding: utf-8 -*-
"""
Landing Cost implementation

:copyright: (c) 2011 by Openlabs Technologies & Consulting (P) Limited.
:license: AGPL, see LICENSE for more details.

"""

from osv import osv, fields
import decimal_precision as dp

class product(osv.osv):
    """
    Add the one2many to account.move
    """
    _inherit = "product.product"
    _columns = {
        'calculated_cost': fields.float('Reviens Calcule'),
        }
product()

class Invoice(osv.osv):
    """
    Add the one2many to account.move
    """
    _inherit = "account.invoice"

    def get_total_quantity(self, cursor, user, ids, 
            name=None, args=None, context=None):
        "Return the total quantity in an invoice"
        result = {}
        for invoice in self.browse(cursor, user, ids, context):
            result[invoice.id] = sum(
                [l.price_subtotal for l in invoice.invoice_line if l.product_id]
                )
        return result
    def get_total_additional_cost(self, cursor, user, ids,
            name=None, args=None, context=None):
        "Return the total cost"
        result = {}
        for invoice in self.browse(cursor, user, ids, context): Invoice()
            result[invoice.id] = sum(
                [sum([l.debit - l.credit for l in m.line_id \ class InvoiceLine(osv.osv):
                        if l.account_id.type == 'other']) \ """Show a computed L/C field"""
                    for m in invoice.additional_costs] _inherit = "account.invoice.line"
                )
        return result def get_landing_cost(self, cursor, user, ids, name, args, context=None):
        "Return the landing cost"
    _columns = { invoice_obj = self.pool.get('account.invoice')
        'total_additional_cost': fields.function(get_total_additional_cost, type="float", result = { }
            method=True, string="Total Frais Additionels", for line in self.browse(cursor, user, ids, context):
            digits_compute= dp.get_precision('Account')), if not line.product_id:
        'total_quantity': fields.function(get_total_quantity, type="float", result[line.id] = line.price_unit
            method=True, string="Quantite Totale", continue
            digits_compute= dp.get_precision('Account')), total_addn_cost = line.invoice_id.total_additional_cost
        'total_price': fields.function(get_total_price, type="float", total_quantity = line.invoice_id.total_quantity
            method=True, string="Montant Totale", dist_cost = 0.00
            digits_compute= dp.get_precision('Account')), frais_mga=total_addn_cost
        'additional_costs': fields.one2many('account.move', 'cost_for_invoice', cours=line.invoice_id.cur_rate
            'Frais Additionels'), fac_dev=line.invoice_id.amount_total
        'cours':fields.float('Cours Devise'), coeff=((frais_mga)+(fac_dev*cours))/fac_dev
        }	    print 'frais_mga'
            print frais_mga
	    print 'fac_dev'
            print fac_dev
            print 'cours'
            print cours
            print 'coeff'
            print coeff
            reviens=0
            if total_quantity > 0.00:
                reviens = line.price_unit*coeff
            result[line.id] = reviens
            print '>>>>>>>>>>>>>>>>>>>Computing'
	    print coeff
            print line.price_unit
	    print reviens
            line.product_id.calculated_cost=reviens
            print line.product_id.name
            self.write(cursor, user, ids, {'product_id.calculated_cost': reviens})
            print line.product_id.calculated_cost
            print result[line.id] 
        return result

    _columns = {
        'landing_cost': fields.function(get_landing_cost, method=True, 
            string='Reviens', type="float",
            digits_compute= dp.get_precision('Account'),),
        }
InvoiceLine()


class AccountMove(osv.osv):
    "Relate account move to invoice"
    _inherit = "account.move"

    _columns = {
        # TODO: Set domain as supplier invoice only
        'cost_for_invoice': fields.many2one('account.invoice', 
            'Cost for Invoice', )
        }
AccountMove()
