# -*- coding: utf-8 -*-
"""
Landing Cost implementation

:copyright: (c) 2011 by Openlabs Technologies & Consulting (P) Limited.
:license: AGPL, see LICENSE for more details.

"""

from osv import osv, fields
import decimal_precision as dp

class product(osv.osv):
    """
    Add the one2many to account.move
    """
    _inherit = "product.product"
    _columns = {
        'calculated_cost': fields.float('Reviens Calcule'),
        }
product()

class Invoice(osv.osv):
    """
    Add the one2many to account.move
    """
    _inherit = "account.invoice"

    def get_total_quantity(self, cursor, user, ids, 
            name=None, args=None, context=None):
        "Return the total quantity in an invoice"
        result = {}
        for invoice in self.browse(cursor, user, ids, context):
            result[invoice.id] = sum(
                [l.price_subtotal for l in invoice.invoice_line if l.product_id]
                )
        return result

    def set_product_cost(self, cr, uid, ids,
            name=None, args=None, context=None):
        "Return the total quantity in an invoice"
        inv_line_obj = self.pool.get('account.invoice.line')
        prod=self.pool.get('product.product')
        inv_obj = self.browse(cr,uid,ids)
        for line in inv_obj[0].invoice_line:
            if not line.product_id:
                continue
            line.product_id.calculated_cost=line.landing_cost
            prod_id=line.product_id.id
        return True       

    def get_total_additional_cost(self, cursor, user, ids,
            name=None, args=None, context=None):
        "Return the total cost"
        result = {}
	for invoice in self.browse(cursor, user, ids, context):
		result[invoice.id]=sum([l.amount for l in invoice.additional_costs])
	return result

    _columns = {
	'total_additional_cost': fields.function(get_total_additional_cost, type="float",method=True, string="Total Frais Additionels",digits_compute= dp.get_precision('Account')),
        'total_quantity': fields.function(get_total_quantity, type="float",method=True, string="Montant Totale",digits_compute= dp.get_precision('Account')),
        'additional_costs': fields.one2many('account.move', 'cost_for_invoice','Frais Additionels'),
        }

Invoice()


class InvoiceLine(osv.osv):
    """Show a computed L/C field"""
    _inherit = "account.invoice.line"

    def get_landing_cost(self, cursor, user, ids, name, args, context=None):
        "Return the landing cost"
        invoice_obj = self.pool.get('account.invoice')
        result = { }
        for line in self.browse(cursor, user, ids, context):
            if not line.product_id:
                result[line.id] = line.price_unit
                continue
            total_addn_cost = line.invoice_id.total_additional_cost
            total_quantity = line.invoice_id.total_quantity
            dist_cost = 0.00
            frais_mga=total_addn_cost
	    cours=line.invoice_id.cur_rate
            fac_dev=line.invoice_id.amount_total
            coeff=((frais_mga)+(fac_dev*cours))/fac_dev
	    #print 'frais_mga'
            #print frais_mga
	    #print 'fac_dev'
            #print fac_dev
            #print 'cours'
            #print cours
            #print 'coeff'
            #print coeff
            reviens=0
            if total_quantity > 0.00:
                reviens = line.price_unit*coeff
            result[line.id] = reviens
            #print '>>>>>>>>>>>>>>>>>>>Computing'
	    #print coeff
            #print line.price_unit
	    #print reviens
            #line.product_id.calculated_cost=reviens
            #print line.product_id.name
            #self.write(cursor, user, ids, {'product_id.calculated_cost': reviens})
            #print line.product_id.calculated_cost
            #print result[line.id] 
        return result
    def get_sale_price(self, cursor, user, ids, name, args, context=None):
        invoice_obj = self.pool.get('account.invoice')
        result = { }
        for line in self.browse(cursor, user, ids, context):
            result[line.id]=line.product_id.lst_price
            if not line.new_sale_price:
                self.write(cursor, user, ids, {'new_sale_price': line.product_id.lst_price})
        # print result
        return result     











        }
InvoiceLine()
    _columns = {
        'landing_cost': fields.function(get_landing_cost, method=True, class AccountMove(osv.osv):
            string='Reviens', type="float", "Relate account move to invoice"
            digits_compute= dp.get_precision('Account'),), _inherit = "account.move"
        'actual_sale_price':fields.function(get_sale_price,method=True,string="Nouveau Prix Vente"),
        'new_sale_price':fields.float('Prix Vente Actuel'), _columns = {
        'marge': fields.related('product_id','ref', type='char', relation='res.partner', string='Code', readonly=1), # TODO: Set domain as supplier invoice only
        }        'cost_for_invoice': fields.many2one('account.invoice',
    _columns = { 'Cost for Invoice', )
        'landing_cost': fields.function(get_landing_cost, method=True, } AccountMove()
            string='Reviens', type="float",
            digits_compute= dp.get_precision('Account'),),
        'actual_sale_price':fields.function(get_sale_price,method=True,string="Nouveau Prix Vente"),
        'new_sale_price':fields.float('Prix Vente Actuel'),
        'marge': fields.related('product_id','ref', type='char', relation='res.partner', string='Code', readonly=1),
        }
