# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
from osv import fields,osv
import paramiko

class res_company(osv.osv):
    """(NULL)"""
    _inherit = 'res.company'
    _columns = {
        'server_name': fields.char('Nom Serveur',size=32),
        'server_user': fields.char('Utilisateur Root',size=32),
        'server_password': fields.char('Mot de passe Root',size=32),
        'create_user_script':fields.char('Script creation utilisateur',size=32),
    }
res_company()

class hr_employee(osv.osv):
    """(NULL)"""
    _inherit = 'hr.employee'
    _columns ={
        'nickname':fields.char('Prenom Commun',size=32),
        'password':fields.char('Mot de passe',size=32),
        'alias':fields.char('Alias',size=32),

    }
    def create_zentyal_user(self, cr, uid, ids, context=None):
        ssh = paramiko.SSHClient()
        policy=ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        company_id=self.pool.get('res.users').browse(cr,uid,[uid])
	company_id=company_id[0].company_id
        connect=ssh.connect(company_id.server_name, username=company_id.server_user, password=company_id.server_password)
        users=self.pool.get('hr.employee').browse(cr,uid,ids)
        for user in users:
            cmd=str(company_id.create_user_script)
            cmd+=' \''
            lastname=user.name.split()[0].lower()
            firstname=user.name.split()[1].lower()
            cmd+=user.nickname.lower()
            cmd+='.'
            cmd+=lastname
            cmd+=','
            cmd+=firstname.title()
            cmd+=','
            cmd+=lastname.title()
            cmd+=','
            cmd+=user.password
            cmd+=','
            cmd+=user.alias
            cmd+='\''
            cmd=str(cmd)
            print '*******'
            print cmd
            print '****'
            stdin, stdout, stderr = ssh.exec_command(cmd)
            #print stdin.readlines()
            #print stdout.readlines()
            error=stderr.readlines()
            print error
            if len(error)>0:
                print error
            else:
                cmd='/home/sysadmin/add_alias '
                cmd+=user.nickname.lower()
                cmd+='.'
                cmd+=lastname.lower()
                cmd+=' '
                cmd+=user.alias
                cmd=str(cmd)
                print cmd
                stdin, stdout, stderr = ssh.exec_command(cmd)
                error=stderr.readlines()
                print error
	return True
hr_employee()

